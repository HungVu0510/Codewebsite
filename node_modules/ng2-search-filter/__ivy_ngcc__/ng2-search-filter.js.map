{"version":3,"file":"ng2-search-filter.js","sources":["ts/src/ng2-filter.pipe.ts","ts/src/ng2-filter.module.ts","ts/ng2-search-filter.ts"],"names":[],"mappings":";;;AACA,MAAA,aAAA,CAAA;AAAE;AAAQ;AAA0C;AAErB;AACnB;AAAQ,IAGpB,SAGG,CAAA,KAAA,EAAA,IAAA,EAHH;AAAE,QACE,IAAI,CAGC,IAAC,IAAO,CAAA,KAAE;AAGT,YAHe,OAAO,KAAA,CAAM;AAGV,QAJxB,OAGO,aAAA,CAAc,MAAC,CAAM,KAAC,EAAM,IAAA,CAAK,CAAC;AACF,KAHxC;AACH;AAEC;AAAO;AACI;AAEA;AAEZ;AAAmB;AAAQ,IAA3B,OAGG,MAAA,CAAA,KAAA,EAAA,IAAA,EAHH;AAAE,QAEE,uBAGM,SAAA,GAAY,IAAA,CAAK,WAAC,EAAW,CAAE;AAAC,QADtC,OAGO,KAAA,CAAM,MAAC,CAAM,UAAC,IAAe,EAHxC;AAAE,YACI,KAAK,qBAGI,QAAA,IAAY,IAAA,EAAM;AACR,gBAHjB,IAAI,IAGC,CAAI,QAAC,CAAQ,KAAK,IAAA,EAAM;AAAE,oBAF7B,SAAS;AACnB,iBAAS;AACT,gBAAQ,IAAI,IAGC,CAAI,QAAC,CAAQ,CAAC,QAAC,EAAQ,CAAE,WAAC,EAAW,CAAE,QAAC,CAAQ,SAAC,CAAS,EAAE;AAItC,oBANzB,OAGO,IAAA,CAAK;AACnB,iBAHM;AACT,aAAO;AACP,YAAM,OAGO,KAAA,CAAM;AAAC,SAFf,CAGC,CAAC;AAAC,KAFL;AACH;AAGO,aAAP,CAAA,UAAO,GAAoC,MAF3C,EAGE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,kBAFlB,IAAI,EAGE,QAAA;SAFN,IAAI,EAGE,KAAA,cAFP,EAGC,EAAG,MAFL,EAGE,IAAA,EAAM,UAAA,EAAW,GAFlB;uGAGC;AAAC;AACA;AAAe;AACjB,aAAD,CAAA,cAAC,GAAA,MAAA,EAAA;;;;;;;;;0BAAC;AACF;AC7CA,MAAA,mBAAA,CAAA;AAAE;AAGwC,mBAA1C,CAAA,UAA0C,GAAoC,MAF9E,EAGE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA,kBAFtB;WAAY,EAGE,CAAA,aAAE,CAAa,kBAF7B,OAAO,EAGE,CAAA,aAAE,CAAa,cAFzB,EAGC,EAAG,GAFJ,2DAGC;AAAC;AACA;AAAe;AACjB,mBAAD,CAAA,cAAC,GAAA,MAAA,EAAA;;;;;;;;0BAAC;AACF;ACbA;AACA;AACA,GAAG;AACH;AACA;AAA+C","sourcesContent":["import { Pipe, PipeTransform, Injectable } from '@angular/core';\nexport class Ng2SearchPipe implements PipeTransform {\n/**\n * @param {?} items object from array\n * @param {?} term term's search\n * @return {?}\n */\ntransform(items: any, term: string): any {\n    if (!term || !items) return items;\n\n    return Ng2SearchPipe.filter(items, term);\n  }\n/**\n *\n * @param {?} items List of items to filter\n * @param {?} term  a string term to compare with every property of the list\n * \n * @return {?}\n */\nstatic filter(items: Array<{ [key: string]: any }>, term: string): Array<{ [key: string]: any }> {\n\n    const /** @type {?} */ toCompare = term.toLowerCase();\n\n    return items.filter(function (item: any) {\n      for (let /** @type {?} */ property in item) {\n        if (item[property] === null) {\n          continue;\n        }\n        if (item[property].toString().toLowerCase().includes(toCompare)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'filter',\n  pure: false\n}, ] },\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2SearchPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2SearchPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2SearchPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { Ng2SearchPipe } from './ng2-filter.pipe';\nexport class Ng2SearchPipeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [Ng2SearchPipe],\n  exports: [Ng2SearchPipe]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2SearchPipeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2SearchPipeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2SearchPipeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Ng2SearchPipeModule,Ng2SearchPipe} from './index';\n"]}